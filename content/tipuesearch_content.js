var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'stage1', 'text': '組員: 40823129\xa0 姓名:汪昱呈 倉儲: 40823129倉儲 \n 組員: 40823149\xa0 姓名:趙偉辰 倉儲: 40823149倉儲 \n 小組倉儲: 小組倉儲 \n', 'tags': '', 'url': 'stage1.html'}, {'title': '每周進度', 'text': '', 'tags': '', 'url': '每周進度.html'}, {'title': 'W1', 'text': '討論主題,以及討論未來幾周需要達成的進度 \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2', 'text': '零件繪製 \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': 'CoppeliaSim模擬及修改 \n \n \n \n \n \n \n 修改輪胎的部分 \n \n \n \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': 'stage1-ag7 PDF \n', 'tags': '', 'url': 'W4.html'}, {'title': 'stage2', 'text': '', 'tags': '', 'url': 'stage2.html'}, {'title': 'W5', 'text': '組員: \n 40823117\xa0 潘奕丞\xa0 \xa0\xa0 40823117 \n 40823122\xa0 吳家凱\xa0 \xa0\xa0 40823122 \n 40823129\xa0 汪昱呈\xa0 \xa0\xa0 40823129 \n 40823149\xa0 趙偉辰\xa0 \xa0\xa0 40823149 \n 分工項目: \n 40823122\xa0 吳家凱\xa0 負責 CoppeliaSim 模擬 \n 40823117\xa0 潘奕丞\xa0 \xa040823129\xa0 汪昱呈\xa0 \xa040823149\xa0 趙偉辰\xa0 負責 機構設計 \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '個人工作: \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '\n \n \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'Heroku', 'text': '1.利用學校的gm帳號建立\xa0\xa0 heroku\xa0 帳號 \n 2.建立\xa0Heroku app \n 3.從\xa0\xa0 http://a.kmol.info:88/heroku.7z \xa0下載 Heroku cli 程式檔案,解至隨身碟 Y: \n 4.修改\xa0 start.bat 中的內容 ,修改完後確認並重新啟動 \n \n 5.測試能否在命令列中執行 heroku.exe, 輸入 heroku version,如果有回應所使用的版本代表上述路徑設定成功 \n 6.proxy的設定,在start.bat當中加入 \n REM for heroku login\nset HTTP_PROXY=http://[2001:288:6004:17::53]:3128\nset HTTPS_PROXY=http://[2001:288:6004:17::53]:3128 \n 7. 利用 Heroku 同步 Github Pages 上的網站內容 \n 8. 使用 git push heroku 就可以將改版內容推送到對應的 Heroku app 倉儲 \n', 'tags': '', 'url': 'Heroku.html'}, {'title': 'stage3', 'text': '', 'tags': '', 'url': 'stage3.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'task1', 'text': '程式碼 \n # open file, default is read mode, since txt content no chinese char\n# no encoding = "UTF-08" is needed\nwith open("stage3_2a.txt") as hj:\n    # readlines will read into the whole line and put into list format \n    # has \\n at the end of each line \n    data = hj.readlines()\n    A= [a.replace(\'4823122\',\'40823122\') for a in data]\n    #replace(\'被取代的\',\'修改成你要的\')\n    #把這串replace (\'4823122\',\'40823122\')命名為a,然後for-loop到data中修改\n    B = [c.replace(\'\\t\\t\\t\\t\',\'\') for c in A]\n    #因為有一組只有6人,所以用 replace 把空位刪除\n    #(\\t\\t代表一個)\n    D = [b.replace(\'_\',\'-\') for b in B]\n    #把_替換成-\n    #print(D)\n#print(len(D))\n#利用len()函式來得出list中有多少元素\nfor i in range(len(data)):\n    #以range為len(data)=6進行迴圈,變數為i\n    group = D[i].rstrip("\\n").split("\\t")\n    #取data list中的第i項進行處理,去除元素中的\\n,並利用\\n為依據,分割元素成為新串列.\n    print(\'<p>\'+group[0]+\'|<a href="https://\'+group[1]+\'.github.io/\'+group[0]+\'">網站</a>|<a href="https://github.com/\'+group[2]+\'/\'+group[0]+\'">倉儲</a></p>\')\n# the following will use group data to generate needed html\n \n    for j in range(2,18,2):\n        #以2為起始每次加2加到16,因為18不算,也就是執行迴圈8次.\n        try:\n            print(\'<p>\'+group[j]+\'|Website:\'+\'<a href="https://\'+group[j]+\'.github.io/cd2021\'+\'">\'+group[j]+\'</a>\'+\'|Repository:\'+\'<a href="https://github.com/\'+group[j]+\'/cd2021\'+\'">\'+group[j]+\'</a></p>\')\n        except:\n            continue#跑到第三組時,會出現錯誤所以使用continue強制執行\n             \n 成果 \n stage3-ag1| 網站 | 倉儲 \n 40823131|Website: 40823131 |Repository: 40823131 \n a40823112|Website: a40823112 |Repository: a40823112 \n 40823123|Website: 40823123 |Repository: 40823123 \n 40823145|Website: 40823145 |Repository: 40823145 \n 40823136|Website: 40823136 |Repository: 40823136 \n 40823109|Website: 40823109 |Repository: 40823109 \n 40823116|Website: 40823116 |Repository: 40823116 \n 40823108|Website: 40823108 |Repository: 40823108 \n stage3-ag2| 網站 | 倉儲 \n 40823151|Website: 40823151 |Repository: 40823151 \n 40623121|Website: 40623121 |Repository: 40623121 \n 40871106|Website: 40871106 |Repository: 40871106 \n 40823102|Website: 40823102 |Repository: 40823102 \n 40823104|Website: 40823104 |Repository: 40823104 \n 40823106|Website: 40823106 |Repository: 40823106 \n 40823101|Website: 40823101 |Repository: 40823101 \n 40823132|Website: 40823132 |Repository: 40823132 \n stage3-ag3| 網站 | 倉儲 \n 40823119|Website: 40823119 |Repository: 40823119 \n 40823150|Website: 40823150 |Repository: 40823150 \n 40823103|Website: 40823103 |Repository: 40823103 \n 40823107|Website: 40823107 |Repository: 40823107 \n 40523252|Website: 40523252 |Repository: 40523252 \n 40823154|Website: 40823154 |Repository: 40823154 \n stage3-ag4| 網站 | 倉儲 \n 40823142|Website: 40823142 |Repository: 40823142 \n 40823144|Website: 40823144 |Repository: 40823144 \n 40823127|Website: 40823127 |Repository: 40823127 \n 40823148|Website: 40823148 |Repository: 40823148 \n 40823121|Website: 40823121 |Repository: 40823121 \n 40823135|Website: 40823135 |Repository: 40823135 \n 40823114|Website: 40823114 |Repository: 40823114 \n 40823146|Website: 40823146 |Repository: 40823146 \n stage3-ag5| 網站 | 倉儲 \n 40823111|Website: 40823111 |Repository: 40823111 \n 40823115|Website: 40823115 |Repository: 40823115 \n 40823128|Website: 40823128 |Repository: 40823128 \n 40823120|Website: 40823120 |Repository: 40823120 \n 40823140|Website: 40823140 |Repository: 40823140 \n 40823124|Website: 40823124 |Repository: 40823124 \n 40823139|Website: 40823139 |Repository: 40823139 \n 40823126|Website: 40823126 |Repository: 40823126 \n stage3-ag6| 網站 | 倉儲 \n 40823152|Website: 40823152 |Repository: 40823152 \n 40823110|Website: 40823110 |Repository: 40823110 \n 40823122|Website: 40823122 |Repository: 40823122 \n 40823125|Website: 40823125 |Repository: 40823125 \n 40823117|Website: 40823117 |Repository: 40823117 \n 40823129|Website: 40823129 |Repository: 40823129 \n 40823149|Website: 40823149 |Repository: 40823149 \n 40823153|Website: 40823153 |Repository: 40823153 \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': 'coppeliasim版本需用4.2.0版,並透過以下程式可遠端操作小車運作 \n \n \n \n \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'W11', 'text': 'cmsimde沒有綠勾,如何除錯 \n STEP \n 1.把stage3-ag6的.gitmodules 刪掉 \n 2.git add .gitmodules \n 3.git rm --cached cmsimde \n 4.直接進到 stage3-ag6 /.git檔/modules/刪掉cmsimde資料夾 \n 5.git commit -m "cmsimde" \n 6.直接進到 stage3-ag6 刪掉cmsimde資料夾 \n 7.git submodule add https://github.com/mdecourse/cmsimde \n 8.git add . \n 9.git commit -m "name" \n 10.git push \n 之後確認是否成功 \n \n', 'tags': '', 'url': 'W11.html'}, {'title': 'W13', 'text': '小組meeting討論分工項目 \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W14', 'text': '', 'tags': '', 'url': 'W14.html'}]};