<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>個人簡介</h1>
<p>個人倉儲:</p>
<p><a href="https://github.com/40823129/cd2021" title="cd2021"> <img alt="" height="138" src="/images/1.png" width="366"/></a></p>
<p>YT頻道:</p>
<p><a href="https://www.youtube.com/channel/UC3JWZoHd_cjY4DreQ4phLpw" title="40823129"> <img alt="" height="145" src="/images/2.png" width="347"/></a></p>
<h1>supplement</h1>
<h2>DroidCam  teaching</h2>
<p>DroidCam turns Android phones into PC video cameras</p>
<p>step1:在手機和電腦上分別下載應用程式  <a href="https://play.google.com/store/apps/details?id=com.dev47apps.droidcam">連結</a></p>
<p>step2:手機上會顯示的資訊   </p>
<p>     </p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">WiFi IP:這裡會有一行數字
Droid Cam Port:4747

IP Cam Access:
https://192.這裡會有一行數字
https://192.這裡會有一行數字</pre>
<p>step3:</p>
<p></p>
<p><span><img alt="" height="626" src="/images/0613-1.png" width="500"/></span></p>
<p><span>如果想把手機當麥克風收音，就要把 Audio 勾起來</span></p>
<p><span>這樣就設定完成了</span></p>
<p></p>
<h1>stage1-ag7</h1>
<p>組員:<span>40823129  姓名:汪昱呈 倉儲:</span><a href="https://github.com/40823129/cd2021">40823129倉儲</a></p>
<p><span>組員:</span><span>40823149  姓名:趙偉辰 倉儲:<a href="https://github.com/40823149/cd2021">40823149倉儲</a></span></p>
<p>小組倉儲:<a href="https://github.com/40823149/stage1-ag7">小組倉儲</a></p>
<h2>W1</h2>
<p>討論主題,以及討論未來幾周需要達成的進度</p>
<h2>W2</h2>
<p>零件繪製</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/wZFStmpKJZI" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/fuabRyHkrVw" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/6HOEv76fmu8" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/7Urwsvs-98w" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/9FWdjF_YCHo" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/eQ3Ipm6NfAc" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/-nR3wZ5Xq0c" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" iframe="" src="https://www.youtube.com/embed/-nR3wZ5Xq0c" width="560"></iframe></p>
<h2>W3</h2>
<p>CoppeliaSim模擬及修改</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/jIXiqTGdo1M" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/MYFAESFz9KM" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/_SaE7C2snZs" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/dZk4TmBg4EA" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Nsfyh1Sk0aw" width="560"></iframe></p>
<p>修改輪胎的部分</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/TT3f33SGPlY" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/jj0FAFv6HN8" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ahVXe9Ew7VY" width="560"></iframe></p>
<h2>W4</h2>
<p><a href="https://40823129.github.io/cd2021/reveal/index.html">stage1-ag7 PDF</a></p>
<h1>stage2-ag7</h1>
<h2>W5</h2>
<p>組員:</p>
<p>40823117  潘奕丞    <a href="https://40823117.github.io/cd2021/content/index.html">40823117</a></p>
<p>40823122  吳家凱    <a href="https://40823122.github.io/cd2021/content/index.html">40823122</a></p>
<p>40823129  汪昱呈    <a href="https://40823129.github.io/cd2021/content/index.html">40823129</a></p>
<p>40823149  趙偉辰    <a href="https://40823149.github.io/cd2021/content/index.html">40823149</a></p>
<p>分工項目:</p>
<p><span>40823122  吳家凱  負責 CoppeliaSim 模擬</span></p>
<p><span>40823117  潘奕丞   40823129  汪昱呈   40823149  趙偉辰  負責 機構設計</span></p>
<h2>W6</h2>
<p><span>個人工作:</span></p>
<p><span></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/kjfmhXQhvsM" title="YouTube video player" width="560"></iframe></p>
<p><img alt="" height="388" src="/images/齒輪軸.png" width="562"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Dfwd6cEwcwQ" title="YouTube video player" width="560"></iframe></p>
<p><img alt="" height="518" src="/images/齒輪.png" width="560"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/0sE6pGL2l4I" title="YouTube video player" width="560"></iframe></p>
<p><img alt="" height="422" src="/images/方鍵.png" width="561"/></p>
<h2>W7</h2>
<p><img alt="" height="438" src="/images/螺釘.png" width="563"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/BD9NBRLEIe0" title="YouTube video player" width="560"></iframe></p>
<p><img alt="" height="470" src="/images/螺釘2.png" width="563"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/67mRmPsLjh4" title="YouTube video player" width="560"></iframe></p>
<h3>coppliasim 模擬</h3>
<p>stage2-ag7(機械狗)---<a href="https://www.youtube.com/watch?v=pxaOEbc9qOs&amp;t=1s">coppeliasim模擬影片</a></p>
<h3>Heroku</h3>
<p>1.利用學校的gm帳號建立  <span>heroku  帳號</span></p>
<p><span>2.建立 Heroku app</span></p>
<p><span>3.從  <a href="http://a.kmol.info:88/heroku.7z">http://a.kmol.info:88/heroku.7z</a> 下載 Heroku cli 程式檔案,解至隨身碟 Y:</span></p>
<p><span>4.修改  start.bat 中的內容 ,修改完後確認並重新啟動</span></p>
<p><span><img alt="" height="324" src="/images/heroku.png" width="421"/></span></p>
<p><span>5.測試能否在命令列中執行 heroku.exe, 輸入 heroku version,如果有回應所使用的版本代表上述路徑設定成功</span></p>
<p><span>6.proxy的設定,在start.bat當中加入</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">REM for heroku login
set HTTP_PROXY=http://[2001:288:6004:17::53]:3128
set HTTPS_PROXY=http://[2001:288:6004:17::53]:3128</pre>
<p>7.<span>利用 Heroku 同步 Github Pages 上的網站內容</span></p>
<p>8.<span>使用 git push heroku 就可以將改版內容推送到對應的 Heroku app 倉儲</span></p>
<h1>stage3-ag6</h1>
<h2>W10</h2>
<h3>task1</h3>
<p>程式碼</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># open file, default is read mode, since txt content no chinese char
# no encoding = "UTF-08" is needed
with open("stage3_2a.txt") as hj:
    # readlines will read into the whole line and put into list format 
    # has \n at the end of each line 
    data = hj.readlines()
    A= [a.replace('4823122','40823122') for a in data]
    #replace('被取代的','修改成你要的')
    #把這串replace ('4823122','40823122')命名為a,然後for-loop到data中修改
    B = [c.replace('\t\t\t\t','') for c in A]
    #因為有一組只有6人,所以用 replace 把空位刪除
    #(\t\t代表一個)
    D = [b.replace('_','-') for b in B]
    #把_替換成-
    #print(D)
#print(len(D))
#利用len()函式來得出list中有多少元素
for i in range(len(data)):
    #以range為len(data)=6進行迴圈,變數為i
    group = D[i].rstrip("\n").split("\t")
    #取data list中的第i項進行處理,去除元素中的\n,並利用\n為依據,分割元素成為新串列.
    print('&lt;p&gt;'+group[0]+'|&lt;a href="https://'+group[1]+'.github.io/'+group[0]+'"&gt;網站&lt;/a&gt;|&lt;a href="https://github.com/'+group[2]+'/'+group[0]+'"&gt;倉儲&lt;/a&gt;&lt;/p&gt;')
# the following will use group data to generate needed html
 
    for j in range(2,18,2):
        #以2為起始每次加2加到16,因為18不算,也就是執行迴圈8次.
        try:
            print('&lt;p&gt;'+group[j]+'|Website:'+'&lt;a href="https://'+group[j]+'.github.io/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+'|Repository:'+'&lt;a href="https://github.com/'+group[j]+'/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;&lt;/p&gt;')
        except:
            continue#跑到第三組時,會出現錯誤所以使用continue強制執行
            </pre>
<p>成果</p>
<p>stage3-ag1|<a href="https://40823131.github.io/stage3-ag1">網站</a>|<a href="https://github.com/40823131/stage3-ag1">倉儲</a></p>
<p>40823131|Website:<a href="https://40823131.github.io/cd2021">40823131</a>|Repository:<a href="https://github.com/40823131/cd2021">40823131</a></p>
<p>a40823112|Website:<a href="https://a40823112.github.io/cd2021">a40823112</a>|Repository:<a href="https://github.com/a40823112/cd2021">a40823112</a></p>
<p>40823123|Website:<a href="https://40823123.github.io/cd2021">40823123</a>|Repository:<a href="https://github.com/40823123/cd2021">40823123</a></p>
<p>40823145|Website:<a href="https://40823145.github.io/cd2021">40823145</a>|Repository:<a href="https://github.com/40823145/cd2021">40823145</a></p>
<p>40823136|Website:<a href="https://40823136.github.io/cd2021">40823136</a>|Repository:<a href="https://github.com/40823136/cd2021">40823136</a></p>
<p>40823109|Website:<a href="https://40823109.github.io/cd2021">40823109</a>|Repository:<a href="https://github.com/40823109/cd2021">40823109</a></p>
<p>40823116|Website:<a href="https://40823116.github.io/cd2021">40823116</a>|Repository:<a href="https://github.com/40823116/cd2021">40823116</a></p>
<p>40823108|Website:<a href="https://40823108.github.io/cd2021">40823108</a>|Repository:<a href="https://github.com/40823108/cd2021">40823108</a></p>
<p>stage3-ag2|<a href="https://40823151.github.io/stage3-ag2">網站</a>|<a href="https://github.com/40823151/stage3-ag2">倉儲</a></p>
<p>40823151|Website:<a href="https://40823151.github.io/cd2021">40823151</a>|Repository:<a href="https://github.com/40823151/cd2021">40823151</a></p>
<p>40623121|Website:<a href="https://40623121.github.io/cd2021">40623121</a>|Repository:<a href="https://github.com/40623121/cd2021">40623121</a></p>
<p>40871106|Website:<a href="https://40871106.github.io/cd2021">40871106</a>|Repository:<a href="https://github.com/40871106/cd2021">40871106</a></p>
<p>40823102|Website:<a href="https://40823102.github.io/cd2021">40823102</a>|Repository:<a href="https://github.com/40823102/cd2021">40823102</a></p>
<p>40823104|Website:<a href="https://40823104.github.io/cd2021">40823104</a>|Repository:<a href="https://github.com/40823104/cd2021">40823104</a></p>
<p>40823106|Website:<a href="https://40823106.github.io/cd2021">40823106</a>|Repository:<a href="https://github.com/40823106/cd2021">40823106</a></p>
<p>40823101|Website:<a href="https://40823101.github.io/cd2021">40823101</a>|Repository:<a href="https://github.com/40823101/cd2021">40823101</a></p>
<p>40823132|Website:<a href="https://40823132.github.io/cd2021">40823132</a>|Repository:<a href="https://github.com/40823132/cd2021">40823132</a></p>
<p>stage3-ag3|<a href="https://40823119.github.io/stage3-ag3">網站</a>|<a href="https://github.com/40823119/stage3-ag3">倉儲</a></p>
<p>40823119|Website:<a href="https://40823119.github.io/cd2021">40823119</a>|Repository:<a href="https://github.com/40823119/cd2021">40823119</a></p>
<p>40823150|Website:<a href="https://40823150.github.io/cd2021">40823150</a>|Repository:<a href="https://github.com/40823150/cd2021">40823150</a></p>
<p>40823103|Website:<a href="https://40823103.github.io/cd2021">40823103</a>|Repository:<a href="https://github.com/40823103/cd2021">40823103</a></p>
<p>40823107|Website:<a href="https://40823107.github.io/cd2021">40823107</a>|Repository:<a href="https://github.com/40823107/cd2021">40823107</a></p>
<p>40523252|Website:<a href="https://40523252.github.io/cd2021">40523252</a>|Repository:<a href="https://github.com/40523252/cd2021">40523252</a></p>
<p>40823154|Website:<a href="https://40823154.github.io/cd2021">40823154</a>|Repository:<a href="https://github.com/40823154/cd2021">40823154</a></p>
<p>stage3-ag4|<a href="https://40823142.github.io/stage3-ag4">網站</a>|<a href="https://github.com/40823142/stage3-ag4">倉儲</a></p>
<p>40823142|Website:<a href="https://40823142.github.io/cd2021">40823142</a>|Repository:<a href="https://github.com/40823142/cd2021">40823142</a></p>
<p>40823144|Website:<a href="https://40823144.github.io/cd2021">40823144</a>|Repository:<a href="https://github.com/40823144/cd2021">40823144</a></p>
<p>40823127|Website:<a href="https://40823127.github.io/cd2021">40823127</a>|Repository:<a href="https://github.com/40823127/cd2021">40823127</a></p>
<p>40823148|Website:<a href="https://40823148.github.io/cd2021">40823148</a>|Repository:<a href="https://github.com/40823148/cd2021">40823148</a></p>
<p>40823121|Website:<a href="https://40823121.github.io/cd2021">40823121</a>|Repository:<a href="https://github.com/40823121/cd2021">40823121</a></p>
<p>40823135|Website:<a href="https://40823135.github.io/cd2021">40823135</a>|Repository:<a href="https://github.com/40823135/cd2021">40823135</a></p>
<p>40823114|Website:<a href="https://40823114.github.io/cd2021">40823114</a>|Repository:<a href="https://github.com/40823114/cd2021">40823114</a></p>
<p>40823146|Website:<a href="https://40823146.github.io/cd2021">40823146</a>|Repository:<a href="https://github.com/40823146/cd2021">40823146</a></p>
<p>stage3-ag5|<a href="https://40823111.github.io/stage3-ag5">網站</a>|<a href="https://github.com/40823111/stage3-ag5">倉儲</a></p>
<p>40823111|Website:<a href="https://40823111.github.io/cd2021">40823111</a>|Repository:<a href="https://github.com/40823111/cd2021">40823111</a></p>
<p>40823115|Website:<a href="https://40823115.github.io/cd2021">40823115</a>|Repository:<a href="https://github.com/40823115/cd2021">40823115</a></p>
<p>40823128|Website:<a href="https://40823128.github.io/cd2021">40823128</a>|Repository:<a href="https://github.com/40823128/cd2021">40823128</a></p>
<p>40823120|Website:<a href="https://40823120.github.io/cd2021">40823120</a>|Repository:<a href="https://github.com/40823120/cd2021">40823120</a></p>
<p>40823140|Website:<a href="https://40823140.github.io/cd2021">40823140</a>|Repository:<a href="https://github.com/40823140/cd2021">40823140</a></p>
<p>40823124|Website:<a href="https://40823124.github.io/cd2021">40823124</a>|Repository:<a href="https://github.com/40823124/cd2021">40823124</a></p>
<p>40823139|Website:<a href="https://40823139.github.io/cd2021">40823139</a>|Repository:<a href="https://github.com/40823139/cd2021">40823139</a></p>
<p>40823126|Website:<a href="https://40823126.github.io/cd2021">40823126</a>|Repository:<a href="https://github.com/40823126/cd2021">40823126</a></p>
<p>stage3-ag6|<a href="https://40823152.github.io/stage3-ag6">網站</a>|<a href="https://github.com/40823152/stage3-ag6">倉儲</a></p>
<p>40823152|Website:<a href="https://40823152.github.io/cd2021">40823152</a>|Repository:<a href="https://github.com/40823152/cd2021">40823152</a></p>
<p>40823110|Website:<a href="https://40823110.github.io/cd2021">40823110</a>|Repository:<a href="https://github.com/40823110/cd2021">40823110</a></p>
<p>40823122|Website:<a href="https://40823122.github.io/cd2021">40823122</a>|Repository:<a href="https://github.com/40823122/cd2021">40823122</a></p>
<p>40823125|Website:<a href="https://40823125.github.io/cd2021">40823125</a>|Repository:<a href="https://github.com/40823125/cd2021">40823125</a></p>
<p>40823117|Website:<a href="https://40823117.github.io/cd2021">40823117</a>|Repository:<a href="https://github.com/40823117/cd2021">40823117</a></p>
<p>40823129|Website:<a href="https://40823129.github.io/cd2021">40823129</a>|Repository:<a href="https://github.com/40823129/cd2021">40823129</a></p>
<p>40823149|Website:<a href="https://40823149.github.io/cd2021">40823149</a>|Repository:<a href="https://github.com/40823149/cd2021">40823149</a></p>
<p>40823153|Website:<a href="https://40823153.github.io/cd2021">40823153</a>|Repository:<a href="https://github.com/40823153/cd2021">40823153</a></p>
<h3>task2</h3>
<p>coppeliasim版本需用4.2.0版,並透過以下程式可遠端操作小車運作</p>
<p><img alt="" height="278" src="/images/螢幕擷取畫面 2021-05-06 011424.png" width="502"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/0tmRh7PEc8g" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/YtgImknOy7g" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/neWlraX76xU" title="YouTube video player" width="560"></iframe></p>
<h2>W11</h2>
<p>cmsimde沒有綠勾,如何除錯</p>
<p>STEP</p>
<p>1.把stage3-ag6的.gitmodules 刪掉</p>
<p>2.git add .gitmodules</p>
<p>3.git rm --cached cmsimde</p>
<p>4.直接進到<span>stage3-ag6</span>/.git檔/modules/刪掉cmsimde資料夾</p>
<p>5.git commit -m "cmsimde"</p>
<p>6.直接進到<span>stage3-ag6</span>刪掉cmsimde資料夾</p>
<p>7.git submodule add https://github.com/mdecourse/cmsimde</p>
<p>8.git add .</p>
<p>9.git commit -m "name"</p>
<p>10.git push</p>
<p>之後確認是否成功</p>
<p><img alt="" height="177" src="/images/cmsimde搶救成功.png" width="506"/></p>
<h2>W13</h2>
<p>小組meeting討論分工項目</p>
<h3>Robodk</h3>
<p>影片(程式碼編輯及模擬)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Mg9tCUC--Ao" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h3>gogs</h3>
<p><span>1.從</span><span><span> </span></span><a href="https://fossil.kmol.info:3443/">這裡</a><span> 進入到以下的畫面,點"+"興建倉儲 "cd2021"(需對應在github的倉儲名稱)</span></p>
<p>2.之後到cmd(小黑)裡輸入</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git remote add fossil http://fossil.kmol.info:3000/學號/cd2021.git
</pre>
<p><span><img caption="false" height="207" src="/images/7.png" width="500"/></span></p>
<p><span>3.推送git push fossil</span></p>
<p><span>4.設定ssh(與github和gitlab相同)</span></p>
<p><span><img caption="false" height="236" src="/images/3.png" width="500"/></span></p>
<p><span><img alt="" height="251" src="/images/4.png" width="500"/></span></p>
<p><span>5.設定putty</span></p>
<p><span><img caption="false" height="454" src="/images/5.png" width="500"/></span></p>
<p><span><img alt="" height="447" src="/images/6.png" width="500"/></span></p>
<p><span></span></p>
<p></p>
<h2>W14-W15</h2>
<p><span>影片字幕翻譯:</span></p>
<p><span>第一部:</span></p>
<p>Inverse kinematics for a 2-joint robot arm using geometry</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/IKOGwoJ2HLk" title="YouTube video player" width="560"></iframe></p>
<p>We saw this simple two-link robot in the previous lecture about forward kinematics.</p>
<p><span>我們在上一堂關於正向運動學的講座中看到了這個簡單的雙連桿機構</span>。</p>
<p>The tooltip pose of the robot is simply described by two numbers, coordinates x and y is relative to the world coordinate system.</p>
<p><span>該機構的姿態由兩個簡單的數字描述，即相對於絕對坐標系的坐標 x 和 y</span>。</p>
<p>So, the problem here is that given x and y, we have to determine the connecting angle Q1 and Q2.</p>
<p>所以，這裡的問題是給定 x 和 y，我們要確定連接角 Q1和Q2.</p>
<p>The solution we will follow in this section is geometric one.</p>
<p>我們將在本節中遵循的解決方案是幾何解決方案。</p>
<p>We're going to start with a simple piece of construction.</p>
<p>我們將從一個簡單的結構開始。</p>
<p>We're going to overlay the red triangle on top of our robot.</p>
<p>我們將在我們的機器人頂部覆蓋紅色三角形。</p>
<p>We know that the end point coordinate is x, y, so the vertical height of the triangle is y,horizontal width is x.</p>
<p>我們知道終點坐標是x，y，所以三角形的垂直高度是y，水平寬度是x。</p>
<p>And, using Pythagoras theorem, we can write thagoras r squared equals x squared plus y squared.</p>
<p>並且，使用畢達哥拉斯定理，我們可以寫出 thagoras r 平方等於 x 平方加 y 平方。</p>
<p>So far.so easy</p>
<p>到目前爲止，很容易</p>
<p>Now, we're going to look at this triangle highlighted here in red and we want to determine the angle alpha.</p>
<p>現在，我們將查看此處以紅色突出顯示的三角形，我們要確定角度 alpha。</p>
<p>In order to do that, we need to use the cosine rule.</p>
<p>為了做到這一點，我們需要使用餘弦規則。</p>
<p>And, if you're a little rusty on the cosine rule, here is a bit of a refresher.</p>
<p>而且，如果你對餘弦規則有點不熟悉，這裡有一點複習。</p>
<p>We have an arbitrary triangle.</p>
<p>我們有一個任意三角形。</p>
<p>We don't have to have any right angles in it and we're going to label the length of this edge as A and the angle opposite that edge, we're going to label as little a.</p>
<p>我們不必在其中有任何直角，我們將這條邊的長度標記為 A，而與該邊相對的角度，我們將標記為小 a。</p>
<p>And, we do the same for this edge and this angle, and this edge and this angle.</p>
<p>並且，我們對這條邊和這個角，以及這條邊和這個角做同樣的事情。</p>
<p>So, all together, the sides are labelled capitals A, B and C, and the angles are labelled little a, little b, and little c.</p>
<p>因此，所有邊都標記為大寫字母 A、B 和 C，角標記為小 a、小 b 和小 c。</p>
<p>So, the cosine rule is simply this relationship here.</p>
<p>所以，餘弦規則就是這裡的這種關係。</p>
<p>It's a bit like Pythagoras' theorem except for this extra term on the end with the cos a in it.</p>
<p>它有點像畢達哥拉斯的定理，除了最後一個額外的術語，其中有 cos a。</p>
<p>Now, let's apply the cosine rule to the particular triangle we looked at a moment rul ago.</p>
<p>現在，讓我們將餘弦規則應用於我們剛才看到的特定三角形。</p>
<p>It's pretty straightforward to write down this particular relationship.</p>
<p>寫下這種特殊關係非常簡單。</p>
<p>We can isolate the term cos alpha which gives us the angle alpha that we're interested in.</p>
<p>我們可以分離出術語 cos alpha，它為我們提供了我們感興趣的角度 alpha。</p>
<p>And, it's defined in terms of the constant link lengths, A1 and A2 and the position of the end effector,x and y.</p>
<p>而且，它是根據恆定連桿長度 A1 和 A2 以及末端執行器的位置 x 和 y 定義的。</p>
<p>We can write this simple relationship between the angles alpha and Q2.</p>
<p>我們可以寫出角度 alpha 和 Q2 之間的這種簡單關係。</p>
<p>And, we know from the shape of the cosine function that cos of Q2 must be equal to negative of cos alpha.</p>
<p>而且，我們從餘弦函數的形狀知道，Q2 的 cos 必須等於 cos alpha 的負值。</p>
<p>This time, let's just write an expression for the cosine of the joined angle Q2.</p>
<p>這一次，讓我們為連接角 Q2 的餘弦寫一個表達式。</p>
<p>Now, we're going to draw yet another red triangle and we're going apply some simple trigonometry here.</p>
<p>現在，我們將繪製另一個紅色三角形，並在此處應用一些簡單的三角函數。</p>
<p>If we know Q2, then we know this length and this length of the red triangle.</p>
<p>如果我們知道 Q2，那麼我們就知道這個長度和這個紅色三角形的長度。</p>
<p>We can write this relationship for the sine of the joined angle Q2.</p>
<p>我們可以為連接角 Q2 的正弦寫出這種關係。</p>
<p>Now, we can consider this bigger triangle whose angle is beta and this side length of the triangle is given here in blue.</p>
<p>現在，我們可以考慮這個更大的三角形，它的角是β，三角形的這條邊長在這裡用藍色給出。</p>
<p>And, the length of the other side of the triangle is this.</p>
<p>並且，三角形另一邊的長度是這個。</p>
<p>So, now we can write an expression for the angle beta in terms of these parameters here.</p>
<p>所以，現在我們可以在此處根據這些參數編寫角度 beta 的表達式。</p>
<p>Going back to the red triangle that we drew earlier, we can establish a relationship between Q1 and the angle beta.</p>
<p>回到我們之前畫的紅色三角形，我們可以建立Q1和角度β之間的關係。</p>
<p>Introduce yet another angle, this one gamma and we can write a relationship between the angle gamma and the tooltip coordinates x and y.</p>
<p>引入另一個角度，這個伽馬，我們可以寫出角度伽馬和工具提示坐標 x 和 y 之間的關係。</p>
<p>Now, we can write a simple relationship between the angles that we've constructed, gamma and beta and the joined angle we're interested in which is Q1.</p>
<p>現在，我們可以在我們構建的角度 gamma 和 beta 與我們感興趣的連接角度 Q1 之間寫出一個簡單的關係。</p>
<p>And, the total relationship looks something like this.</p>
<p>而且，整個關係看起來像這樣。</p>
<p>Quite a complex relationship, it gives us the angle of joined one, that's Q1 in terms of the end effector coordinates y and x, and a bunch of constants, a1 and a2, and it's also a function of the second joint angle, Q2.</p>
<p>相當複雜的關係，它為我們提供了連接的角度，即根據末端執行器坐標 y 和 x 的 Q1，以及一系列常量 a1 和 a2，它也是第二個關節角度 Q2 的函數。</p>
<p>So, let's summarize what it is that we have derived here.1</p>
<p>所以，讓我們總結一下我們在這裡得出的結論。1</p>
<p>We have an expression for the cosine of Q2 and we have an expression for Q1.</p>
<p>我們有 Q2 的餘弦表達式和 Q1 的表達式。</p>
<p>Now, the cosine function is symmetrical about 0.</p>
<p>現在，餘弦函數關於 0 對稱。</p>
<p>So, if we know the value of the cosine of Q2, then there are two possible solutions, a positive angle and a negative angle.</p>
<p>所以，如果我們知道 Q2 的餘弦值，那麼有兩種可能的解，一個正角和一個負角。</p>
<p>We're going to explicitly choose the positive angle, which means that I can write this expression here.</p>
<p>我們將明確選擇正角，這意味著我可以在這裡寫這個表達式。</p>
<p>And now, we have what we call the inverse kinematic solution for this two-link robot.</p>
<p>現在，我們有了這個雙連桿機器人的逆運動學解決方案。</p>
<p>We have an expression for the two joined angles, Q1 and Q2 in terms of the end effector pose x and y, and a bunch of constants.</p>
<p>我們有兩個連接角 Q1 和 Q2 的表達式，根據末端執行器姿勢 x 和 y 以及一系列常數。</p>
<p>You notice that the two equations are not independent.</p>
<p>你注意到這兩個方程不是獨立的。</p>
<p>The equation for Q1, in fact, depends on the solution for Q2.</p>
<p>事實上，Q1 的方程取決於 Q2 的解。</p>
<p>In this case, Q2 is negative and we're going to write the solution for Q2 with a negative sign in front of the inverse cosine.</p>
<p>在這種情況下，Q2 是負數，我們將在反餘弦前用負號編寫 Q2 的解。</p>
<p>Now, we need to solve for Q1, so we're going to introduce this particular red triangle, the angle beta that we solved previously, and the angle gamma which is defined in terms of y and x.</p>
<p>現在，我們需要求解 Q1，因此我們將介紹這個特定的紅色三角形、我們之前求解的角度 beta 以及根據 y 和 x 定義的角度 gamma。</p>
<p>Now, we write a slightly different relationship between q1, gamma and beta, different to what we had before.</p>
<p>q1、ɣ和β之間的關西，和之前求的不同。</p>
<p>There’s a change of sign involved.</p>
<p>涉及到符號的變化。</p>
<p>Then, we can substitute all that previous equation and come up with this expression for q1.</p>
<p>然後我們可代換之前所有等式，並求得此q1方程式。</p>
<p>Again, there is a change of sign here.</p>
<p>同樣，這裡的符號發生了變化。</p>
<p>Previously, this was a negative sign.</p>
<p>先前，這是個負號。</p>
<p>And, here in summary form is the solution for the inverse kinematics of our two-link robot when it is in this particular configuration, where q2 is negative.</p>
<p>這是雙連桿機構在此逆向運動學的總形式，其中q2為負。</p>
<p>Let’s compare the two solutions, the case where q2 is positive and the case where q2 is negative.</p>
<p>讓我們比較兩個解決方案，q2為正和q2為負的情況。</p>
<p>從影片中的內容得知:</p>
<p><img alt="" height="281" src="/images/9.png" width="500"/></p>
<p>第二部:</p>
<p>Inverse kinematics for a 2-joint robot arm using algebra</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/eIZuz1XCd0w" title="YouTube video player" width="560"></iframe></p>
<p><span>Here we have the same two link robot as we just looked at but this time we're going tosolve it using an analytical approach , that is we're going to rely much more on algebra ,particular linear algebra rather than geometry .</span></p>
<p>這裡我們有與我們相同的兩個鏈接機器人只是看著，但這次我們要使用分析方法解決它，即我們是否會更多地依賴代數，特定的線性代數而不是幾何。</p>
<p><span>We have an expression E , which is the homogeneous transformation which represents the pose of the robots endefector and we looked at this in the last lecture , we can write the endefector pose as a sequence of elementary homogeneous transformations .</span></p>
<pre class="tw-data-text tw-text-large XcVN5d tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span class="Y2IQFc" lang="zh-TW">我們有一個表達式 E，它是表示機器人 endefector 位置的齊次變換，我們在上一課中看到了這一點，<br/>我們可以將 endefector 位置寫成一系列基本齊次變換。</span></pre>
<p>A rotation by Q1 , a translation along the X direction by A1 , a rotation by Q2 and then a translation in the X direction by A2 .</p>
<p>Q1 旋轉，A1 沿 X 方向平移，Q2 旋轉，然後 A2 沿 X 方向平移。</p>
<p>If I expand this out , multiply all the transformations together , I get the expression shown here ; a three by three homogeneous transformation matrix representing the pose of the robot's endefector.</p>
<p>如果我將其展開，將所有變換相乘，就會得到此處所示的表達式 E ;它是一個三乘三的齊次變換矩陣，表示機械手臂的最終的位置。</p>
<p>Now for this particular two link robot , we are only interested in the position of its endefector , it's X and Y co - ordinate and they are these two elements within the homogeneous transformation matrix , so I'm going to copy those out .</p>
<p>現在對於這個特殊的兩連桿機器人，我們只對它的最終位置感興趣，與它有關的是 X 和 Y 坐標，它們是齊次變換矩陣中的這兩個元素，所以我將把它們複製出來。</p>
<p>So here again is our expression for X and Y and what we're going to do is a fairly common trick , we're going to square and add these two equations and I get a relationship that looks like this .</p>
<p>所以這裡又是我們對 X 和 Y 的表達式，我們要做的是一個相當常見的技巧，我們要將它平方並將這兩個方程相加，我得到一個看起來像這樣的關係式。</p>
<p>Now I can solve for the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2.</p>
<p><span>現在我可以根據最終位置X 和 Y 以及機器人的常數 A1 和 A2 來求解關節角度 Q2。</span></p>
<p>Now what I'm going to do is apply the sum of angles identity .</p>
<p>現在我要做的是應用角度之和的特性。</p>
<p>I'm going to expand these terms, sine of Q1 plus Q2 or cos of Q1 plus Q2 and to make life a little bit easier, I'm going to make some substations, so where ever I had cos Q2, I'm going to write C2 and where ever I had sine Q2, I'm going to write S2.</p>
<p>我將展開這些項，Q1 的正弦加 Q2 或 Q1 的餘弦加 Q2，為了讓生活更輕鬆一點，我將建立一些分部，所以只要有 cos Q2，我會將其取代為C2並且在有正弦Q2的地方，我會將其取代為S2。</p>
<p>It's a fairly common shorthand when people are looking at robot kinematic equations.</p>
<p>當人們解決機械手臂運動學方程式時，這是一個相當常見的快速記法。</p>
<p>And here are the equations after making those substitutions.</p>
<p>這是進行替換後的方程式。</p>
<p>Looking at these two equations, I can see that they fall into a very well known form and for that form there is a very well known solution.</p>
<p>看看這兩個方程式，我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個眾所皆知的解決方案。</p>
<p>So I'm going to consider just one of the equations, the equation for Y and using our well known identity and it's solution, I can determine the values for the variables little a, little b and little c and once l've determined those, then I can just write down the solution for Q1, which x is the equivalent of theta in this particular case.</p>
<p>所以我將只考慮其中一個方程，Y 的方程，並使用我們眾所周知的恆等式和它的解，我可以確定變量小 a、小 b 和小 c 的值，一旦我確定了這些，然後我可以寫下 Q1 的解決方程，在這種特殊情況下，x 相當於<span> </span><span>θ</span>。</p>
<p>Here again is our expression for Q1, copied over from the previous slide and we may remember from earlier in our workings that we determined this particular relationship; X squared plus Y squared is equal to this particular complex expression.</p>
<p>這裡再次是我們對 Q1 的表達，從上一張幻燈片複製過來，我們可能還記得在我們早期的說明中，確定了這種特殊關係； X 平方加 Y 平方等於這個特定的複雜表達式。</p>
<p>So I can substitute that in and do some simplification and I end up with this slightly less complex expression for Q1.</p>
<p>因此，我可以將其替換並進行一些簡化，最終得到 Q1 的這個稍微不那麼複雜的表達式。</p>
<p>And it is the same expression that I got following the geometric approach in the previous section.</p>
<p><span>這與我在上一節中遵循幾何方法得到的表達式一樣</span>。</p>
<p>從影片的內容可得知:</p>
<p><img caption="false" height="281" src="/images/8.png" width="500"/></p>
<p><span></span></p>
<p><span></span></p>
<p></p>
<h2>W16</h2>
<h3>Onshape 零組件繪製</h3>
<p>onshape零件連結:<a href="https://cad.onshape.com/documents/ad3e8a40547adfe153c1c337/w/84640b2275e74e58d912f25d/e/486b29fb5a986d53574880be">底座</a>  <a href="https://cad.onshape.com/documents/8d0c646e570242872e7288dc/w/722eacffdebd14d4fbb6626d/e/7f7e699c8ef965e2ea38767b">arm 1</a> <a href="https://cad.onshape.com/documents/774035bc83123d29d9455ea5/w/0bbf68316202d2228d5cc882/e/6127352194de2c57d2a165f6">arm 2</a>  <a href="https://cad.onshape.com/documents/e612fa65948031f505a55788/w/8652b995a0d22703270a36b8/e/3d07ed0674431c34417dd202">軸</a> </p>
<p>onshape組合件連結: <a href="https://cad.onshape.com/documents/08061b31ee75722018b7f51d/w/ade291d1fc83d5e5e8e3b96d/e/e368832f4c829338e5440f89">組合圖</a></p>
<p>零件繪製影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/eCSrwmfxI_k" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/HkuVICGeDFs" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ForO_TIf7Wc" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/RKP-JJ9gHxo" title="YouTube video player" width="560"></iframe></p>
<p>MTB robot組立影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/n38DD_WI47s" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Ljs0ZaSFJS8" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/UvT8baDxMm0" title="YouTube video player" width="560"></iframe></p>
<h3>CoppeliaSim 4.1.0 MTB robot</h3>
<p></p>
<p>影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/KfJiGpmt954" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p></p>
<p>Tips:要注意的是程式內部的名稱要跟軸的名字一樣,否則無法作動</p>
<p></p>
<p><img caption="false" height="201" src="/images/MTB.png" width="500"/></p>
<p></p>
<p>程式碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
     axis1=sim.getObjectHandle('MTB_axis1')
     axis1=sim.getObjectHandle('MTB_axis1')
     axis3=sim.getObjectHandle('MTB_axis3')
     axis4=sim.getObjectHandle('MTB_axis4')     
     rotation1 = 0
     distance3 = 0
      
     deg = math.pi/180
     --sim.sJointTargetVelocity(joint,5.5)
      
      
     
      
 
end
 
function sysCall_actuation()
 calibration = 0.0042
 message,auxiliaryData=sim.getSimulatorMessage()
 if (message==sim.message_keypress) then
      print(auxiliaryData[1])--key
      if (auxiliaryData[1]==string.byte(' ')) then
      end
      if (auxiliaryData[1]==97) then--a
      rotation1 = rotation1 + 5*deg
      sim.setJointPosition(axis1, rotation1)
      end
      if (auxiliaryData[1]==100) then --d
      rotation1 = rotation1 - 5*deg
      sim.setJointPosition(axis1, rotation1)
      end
      if (auxiliaryData[1]==119) then --s
      distance3 = distance3 + 0.01 + calibration
      sim.setJointPosition(axis3, distance3)
      end
      if (auxiliaryData[1]==115) then --w
      distance3 = distance3 - 0.01 - calibration
      sim.setJointPosition(axis3, distance3)
      end
      
 end   
 
 
end
function sysCall_sensing()
    -- put your sensing code here
end
 
function sysCall_cleanup()
    -- do some clean-up here
end
 
-- See the user manual or the available code snippets for additional callback functions and details</pre>
<h3>MTB_robot add suction pad</h3>
<p>影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/xOBn5r0un6U" title="YouTube video player" width="560"></iframe></p>
<p>主程式:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
     axis1=sim.getObjectHandle('MTB_axis1')
     axis1=sim.getObjectHandle('MTB_axis1')
     axis3=sim.getObjectHandle('MTB_axis3')
     axis4=sim.getObjectHandle('MTB_axis4')
     suctionPad=sim.getObjectHandle('suctionPad')     
     rotation1 = 0
     distance3 = 0
      
     deg = math.pi/180
     --sim.sJointTargetVelocity(joint,5.5)
      
      
     
      
 
end
 
function sysCall_actuation()
 calibration = 0.0042
 message,auxiliaryData=sim.getSimulatorMessage()
 if (message==sim.message_keypress) then
      print(auxiliaryData[1])--key
      if (auxiliaryData[1]==string.byte(' ')) then
      end
      if (auxiliaryData[1]==97) then--a
      rotation1 = rotation1 + 5*deg
      sim.setJointPosition(axis1, rotation1)
      end
      if (auxiliaryData[1]==100) then --d
      rotation1 = rotation1 - 5*deg
      sim.setJointPosition(axis1, rotation1)
      end
      if (auxiliaryData[1]==119) then --s
      distance3 = distance3 + 0.01 + calibration
      sim.setJointPosition(axis3, distance3)
      end
      if (auxiliaryData[1]==115) then --w
      distance3 = distance3 - 0.01 - calibration
      sim.setJointPosition(axis3, distance3)
      end
      if (auxiliaryData[1]==112) then --p activate the suction pad
sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),'active','true')
      end -- if p
      if (auxiliaryData[1]==113) then --q deactivate the suction pad
sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),'active','false')
      end -- if q
      
 end   
 
 
end
function sysCall_sensing()
    -- put your sensing code here
end
 
function sysCall_cleanup()
    -- do some clean-up here
end
 
-- See the user manual or the available code snippets for additional callback functions and details
</pre>
<h3>逆向運動學函式</h3>
<p>影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/3F1TOlC-U3E" title="YouTube video player" width="560"></iframe></p>
<p>主程式:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    axis1=sim.getObjectHandle('MTB_axis1')
    axis2=sim.getObjectHandle('MTB_axis2')
    axis3=sim.getObjectHandle('MTB_axis3')
    axis4=sim.getObjectHandle('MTB_axis4')
    mtb3=sim.getObjectHandle('link3')
    suctionPad=sim.getObjectHandle('suctionPad')
    BaseFrame=sim.getObjectHandle("BaseFrame")
    block =sim.getObjectHandle("Cuboid")
    rotation1 = 0
    rotation2 = 0
    distance3 = 0
    modelBase=sim.getObjectHandle(sim.handle_self)
    robotBase=modelBase
    robotName='suctionPad'
    deg = math.pi/180
     
end
function sysCall_actuation() 
    calibration = 0.0042
    message, auxiliaryData=sim.getSimulatorMessage()
        while message ~= -1 do
            key=auxiliaryData[1]
            sim.addStatusbarMessage('????? key:'..key)
            if (message==sim.message_keypress) then
            if (auxiliaryData[1]==112) then --p activate the suction pad
                sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),"active",'true')
                end -- if p
                if (auxiliaryData[1]==113) then --q deactivate the suction pad
                sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),'active','false')
                end -- if q
                if (auxiliaryData[1]==49) then  
                     rotation1 = 67.8
                     rotation2 = 44.76
                     sim.setJointPosition(axis1, rotation1)
                     sim.setJointPosition(axis2, rotation2)
                end -- if 1
                if (auxiliaryData[1]==50) then  
                     rotation1 = -279.64
                     rotation2 = -49.9
                     sim.setJointPosition(axis1, rotation2)
                     sim.setJointPosition(axis2, rotation1)
                end -- if 2
                if (auxiliaryData[1]==100) then  
                     distance3 = distance3 + 0.03 + calibration
                     sim.setJointPosition(axis4, distance3)
                end -- if d
                if (auxiliaryData[1]==117) then 
                     distance3 = distance3 - 0.03 - calibration
                     sim.setJointPosition(axis4, distance3)
                end -- if u
           end  -- if
    message, auxiliaryData=sim.getSimulatorMessage()
        end -- while
end -- function</pre>
<p><img alt="" height="375" src="/images/41123.jpg" width="500"/></p>
<h3>Python remote API 逆向運動學函式</h3>
<p>影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/CnYMu8I5zRw" title="YouTube video player" width="560"></iframe></p>
<p>主程式:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">-- Put some initialization code here:
sim.setThreadSwitchTiming(2) -- Default timing for automatic thread switching

-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end

-- Put some clean-up code here:
simRemoteApi.start(19997)</pre>
<p>吸盤程式:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    --this is teach by 40823214
    objectHandle=sim.getObjectHandle('suctionPad')
    sim.setUserParameter(objectHandle,'@enable','')
    modelBase=sim.getObjectAssociatedWithScript(sim.handle_self)
    robotBase=modelBase
    while true do
        robotBase=sim.getObjectParent(robotBase)
        if robotBase==-1 then
            robotName='Dobot'
            break
        end
        robotName=sim.getObjectName(robotBase)
        suffix,suffixlessName=sim.getNameSuffix(robotName)
        if suffixlessName=='Dobot' then
            break
        end
    end
 
    s=sim.getObjectHandle('suctionPadSensor')
    l=sim.getObjectHandle('suctionPadLoopClosureDummy1')
    l2=sim.getObjectHandle('suctionPadLoopClosureDummy2')
    b=sim.getObjectHandle('suctionPad')
    suctionPadLink=sim.getObjectHandle('suctionPadLink')
    local gripperBase=sim.getObjectAssociatedWithScript(sim.handle_self)
 
    infiniteStrength=sim.getScriptSimulationParameter(sim.handle_self,'infiniteStrength')
    maxPullForce=sim.getScriptSimulationParameter(sim.handle_self,'maxPullForce')
    maxShearForce=sim.getScriptSimulationParameter(sim.handle_self,'maxShearForce')
    maxPeelTorque=sim.getScriptSimulationParameter(sim.handle_self,'maxPeelTorque')
 
    sim.setLinkDummy(l,-1)
    sim.setObjectParent(l,b,true)
    m=sim.getObjectMatrix(l2,-1)
    sim.setObjectMatrix(l,-1,m)
end
 
function sysCall_cleanup() 
    --this is teach by 40823214
    sim.setLinkDummy(l,-1)
    sim.setObjectParent(l,b,true)
    m=sim.getObjectMatrix(l2,-1)
    sim.setObjectMatrix(l,-1,m)
end
 
function sysCall_sensing() 
    parent=sim.getObjectParent(l)
    --this is teach by 40823214
    local sig=sim.getIntegerSignal("pad_switch")
    if (not sig) or (sig==0) then
        if (parent~=b) then
            sim.setLinkDummy(l,-1)
            sim.setObjectParent(l,b,true)
            m=sim.getObjectMatrix(l2,-1)
            sim.setObjectMatrix(l,-1,m)
        end
    else
        if (parent==b) then
            index=0
            while true do
                shape=sim.getObjects(index,sim.object_shape_type)
                if (shape==-1) then
                    break
                end
                local res,val=sim.getObjectInt32Parameter(shape,sim.shapeintparam_respondable)
                if (shape~=b) and (val~=0) and (sim.checkProximitySensor(s,shape)==1) then
                    -- Ok, we found a respondable shape that was detected
                    -- We connect to that shape:
                    -- Make sure the two dummies are initially coincident:
                    sim.setObjectParent(l,b,true)
                    m=sim.getObjectMatrix(l2,-1)
                    sim.setObjectMatrix(l,-1,m)
                    -- Do the connection:
                    sim.setObjectParent(l,shape,true)
                    sim.setLinkDummy(l,l2)
                    break
                end
                index=index+1
            end
        else
            -- Here we have an object attached
            if (infiniteStrength==false) then
                -- We might have to conditionally beak it apart!
                result,force,torque=sim.readForceSensor(suctionPadLink) -- Here we read the median value out of 5 values (check the force sensor prop. dialog)
                if (result&gt;0) then
                    breakIt=false
                    if (force[3]&gt;maxPullForce) then breakIt=true end
                    sf=math.sqrt(force[1]*force[1]+force[2]*force[2])
                    if (sf&gt;maxShearForce) then breakIt=true end
                    if (torque[1]&gt;maxPeelTorque) then breakIt=true end
                    if (torque[2]&gt;maxPeelTorque) then breakIt=true end
                    if (breakIt) then
                        -- We break the link:
                        sim.setLinkDummy(l,-1)
                        sim.setObjectParent(l,b,true)
                        m=sim.getObjectMatrix(l2,-1)
                        sim.setObjectMatrix(l,-1,m)
                    end
                end
            end
        end
    end
end</pre>
<p>MTB_robot remote API程式:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import math
import random
import time
import keyboard
  
  
print ('Start')
  
# Close eventual old connections
vrep.simxFinish(-1)
# Connect to V-REP remote server
clientID = vrep.simxStart('127.0.0.1', 19997, True, True, 5000, 5)
  
if clientID != -1:
    print ('Connected to remote API server')
      
    res = vrep.simxAddStatusbarMessage(
        clientID, "40823129",
        vrep.simx_opmode_oneshot)
    if res not in (vrep.simx_return_ok, vrep.simx_return_novalue_flag):
        print("Could not add a message to the status bar.")
  
      
    opmode = vrep.simx_opmode_oneshot_wait
    angle1=math.pi/180
      
    # radian to degree
    deg = 180/math.pi
    # link 1 length
    a1 = 0.468
    # link 2 length
    a2 = 0.4
    # derivated based up https://www.youtube.com/watch?v=IKOGwoJ2HLk&amp;t=311s
       
    def ik(x, y):
    # (x, y)  need to be located inside the circle with radius a1+a2
       if (x**2 + y**2) &lt;= (a1+ a2)**2:
          q2 = math.acos((x**2+y**2-a1**2-a2**2)/(2*a1*a2))
          q1 = math.atan2(y, x) - math.atan2((a2*math.sin(q2)), (a1+a2*math.cos(q2)))
        # The decimal point of number is rounded to the 4th place
          return [round(q1*deg, 4), round(q2*deg, 4)]
       else:
         print("Over range!")
        # end the script execution
 
  
    theta = ik(0.2, 0.7)
  
    print(theta[0], theta[1])
 
 
    ret,axis2=vrep.simxGetObjectHandle(clientID,"MTB_axis2",opmode)
    ret,axis1=vrep.simxGetObjectHandle(clientID,"MTB_axis1",opmode)
    ret,axis4=vrep.simxGetObjectHandle(clientID,"MTB_axis4",opmode)
    ret,suctionPad=vrep.simxGetObjectHandle(clientID,"suctionPad",opmode)
    vrep.simxSetJointTargetPosition(clientID,axis1,theta[0]*angle1,opmode)
    vrep.simxSetJointTargetPosition(clientID,axis2,theta[1]*angle1,opmode)
    vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)
    time.sleep(0.5)
    while True:
            vrep.simxSetJointPosition(clientID,axis4,-0.15,opmode)
            time.sleep(0.5)
            vrep.simxSetJointPosition(clientID,axis4,0.01,opmode)
            theta = ik(0.2, 0.7)
            time.sleep(0.5)
            vrep.simxSetJointPosition(clientID,axis4,0.01,opmode)
            vrep.simxSetJointPosition(clientID,axis2,theta[0]*angle1,opmode)
            vrep.simxSetJointPosition(clientID,axis1,theta[1]*angle1,opmode)
            time.sleep(2)
            vrep.simxSetIntegerSignal(clientID,"pad_switch",0,opmode)
            time.sleep(0.5)
            vrep.simxSetJointPosition(clientID,axis4,-0.03,opmode)
            time.sleep(0.5)
            vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)
            time.sleep(0.5)
            vrep.simxSetJointPosition(clientID,axis4,0.03,opmode)
            time.sleep(0.5)
            theta = ik(-0.3, -0.55)
            vrep.simxSetJointPosition(clientID,axis4,0.01,opmode)
            vrep.simxSetJointPosition(clientID,axis2,theta[0]*angle1,opmode)
            vrep.simxSetJointPosition(clientID,axis1,theta[1]*angle1,opmode)
            time.sleep(2)
            vrep.simxSetIntegerSignal(clientID,"pad_switch",0,opmode)
            time.sleep(0.5)
            vrep.simxSetJointPosition(clientID,axis4,0.01,opmode)
            time.sleep(0.5)
            vrep.simxSetJointPosition(clientID,axis4,-0.03,opmode)
            time.sleep(0.5)
            vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)
    end
          
else:
    print ('Failed connecting to remote API server')
    print ('End')</pre>
<p></p>